trigger:
- main

pool:
  name: 'Default'  # Nombre del pool donde está tu agente autoalojado

variables:
  imageRepository: 'edwardpinzon651/hello-world'
  containerRegistry: 'miregistro1996.azurecr.io'
  dockerfilePath: 'Dockerfile'
  tag: '$(Build.BuildId)'
  azureSubscription: 'AzureServiceConnection'  # Nombre de tu conexión de servicio
  resourceGroup: 'miNuevoGrupoDeRecursos'
  aksCluster: 'miClusterAKS'

stages:
- stage: Checkout
  jobs:
  - job: Checkout
    steps:
    - checkout: self
      displayName: 'Clonar repositorio'

- stage: Build
  dependsOn: Checkout
  jobs:
  - job: Build
    steps:
    - task: UseNode@1
      inputs:
        versionSpec: '14.x'
        checkLatest: true
      displayName: 'Configurar Node.js'

    - script: |
        npm install
      displayName: 'Instalar dependencias'

    - script: |
        npm run lint
      displayName: 'Ejecutar análisis de código estático'

    - script: |
        docker build -t $(imageRepository):$(tag) -f $(dockerfilePath) .
        docker tag $(imageRepository):$(tag) $(containerRegistry)/$(imageRepository):$(tag)
      displayName: 'Construir imagen Docker'

    - task: Docker@2
      inputs:
        command: 'login'
        containerRegistry: 'dockerRegistryConnection'
      displayName: 'Iniciar sesión en Docker Registry'

    - script: |
        docker push $(containerRegistry)/$(imageRepository):$(tag)
      displayName: 'Enviar imagen Docker al registro'

- stage: Deploy
  dependsOn: Build
  jobs:
  - job: Deploy
    steps:
    - task: AzureCLI@2
      inputs:
        azureSubscription: '$(azureSubscription)'
        scriptType: 'ps'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az aks get-credentials --resource-group $(resourceGroup) --name $(aksCluster)
          kubectl apply -f deployment.yaml
      displayName: 'Desplegar en AKS'
